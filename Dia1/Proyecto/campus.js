const express = require('express');
const { MongoClient, ObjectId } = require('mongodb');

const app = express();
const PORT = process.env.PORT || 3000;

// Configuraci√≥n de la base de datos
const uri = 'mongodb+srv://sayaraaparicio07:tKDd6B56ULxRqXY6@cluster0.qs5meyc.mongodb.net/';
const dbName = 'CampusLands';
const collectionName = 'campers';


let db, collection;


app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ===== FUNCI√ìN PARA CONECTAR A MONGODB =====
async function conectarDB() {
    try {
        console.log('üîÑ Conectando a MongoDB...');
        const client = new MongoClient(uri);
        await client.connect();

        db = client.db(dbName);
        collection = db.collection(collectionName);

        console.log('‚úÖ Conexi√≥n exitosa a MongoDB');
        console.log(`üìä Base de datos: ${dbName}`);
        console.log(`üì¶ Colecci√≥n: ${collectionName}`);
        return true;
    } catch (error) {
        console.error('‚ùå Error conectando a MongoDB:', error.message);
        return false;
    }
}

// ===== RUTA DE BIENVENIDA =====
app.get('/', (req, res) => {
    res.json({
        message: 'üèïÔ∏è Bienvenido al CRUD de Campers',
        version: '1.0.0',
        endpoints: {
            'GET /campers': 'Obtener todos los campers',
            'GET /campers/:id': 'Obtener camper por ID',
            'POST /campers': 'Crear nuevo camper',
            'PUT /campers/:id': 'Actualizar camper',
            'DELETE /campers/:id': 'Eliminar camper'
        },
        timestamp: new Date().toISOString()
    });
});

// ===== OBTENER TODOS LOS CAMPERS =====
app.get('/campers', async (req, res) => {
    try {
        console.log('üìã Obteniendo lista de campers...');
        const campers = await collection.find({}).sort({ fechaCreacion: -1 }).toArray();
        
        console.log(`‚úÖ Encontrados ${campers.length} campers`);
        
        res.json({
            success: true,
            total: campers.length,
            data: campers
        });

    } catch (error) {
        console.error('‚ùå Error obteniendo campers:', error.message);
        res.status(500).json({ 
            success: false,
            error: 'Error interno del servidor',
            message: error.message 
        });
    }
});

// ===== OBTENER CAMPER POR ID =====
app.get('/campers/:id', async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`üîç Buscando camper con ID: ${id}`);

        if (!ObjectId.isValid(id)) {
            console.log('‚ùå ID no v√°lido');
            return res.status(400).json({ 
                success: false,
                error: 'ID no v√°lido' 
            });
        }

        const camper = await collection.findOne({ _id: new ObjectId(id) });

        if (!camper) {
            console.log('‚ùå Camper no encontrado');
            return res.status(404).json({ 
                success: false,
                error: 'Camper no encontrado' 
            });
        }

        console.log(`‚úÖ Camper encontrado: ${camper.nombre} ${camper.apellido}`);
        res.json({
            success: true,
            data: camper
        });

    } catch (error) {
        console.error('‚ùå Error obteniendo camper:', error.message);
        res.status(500).json({ 
            success: false,
            error: 'Error interno del servidor',
            message: error.message 
        });
    }
});

// ===== CREAR CAMPER =====
app.post('/campers', async (req, res) => {
    try {
        const { nombre, apellido, edad, email, ruta } = req.body;
        console.log('‚ûï Creando nuevo camper...');
        console.log(`üìù Datos: ${nombre} ${apellido}, ${email}`);

        // Validaciones b√°sicas
        if (!nombre || !apellido || !email || !ruta) {
            console.log('‚ùå Faltan campos obligatorios');
            return res.status(400).json({ 
                success: false,
                error: 'Los campos nombre, apellido, email y ruta son obligatorios' 
            });
        }

        const nuevoCamper = {
            nombre: nombre.trim(),
            apellido: apellido.trim(),
            edad: parseInt(edad) || 0,
            email: email.trim().toLowerCase(),
            ruta: ruta.trim(),
            fechaCreacion: new Date()
        };

        const resultado = await collection.insertOne(nuevoCamper);
        
        console.log(`‚úÖ Camper creado con ID: ${resultado.insertedId}`);
        
        res.status(201).json({ 
            success: true,
            message: 'Camper creado exitosamente',
            id: resultado.insertedId,
            data: nuevoCamper
        });

    } catch (error) {
        console.error('‚ùå Error creando camper:', error.message);
        res.status(500).json({ 
            success: false,
            error: 'Error interno del servidor',
            message: error.message 
        });
    }
});

// ===== ACTUALIZAR CAMPER =====
app.put('/campers/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const { nombre, apellido, edad, email, ruta } = req.body;
        
        console.log(`üìù Actualizando camper con ID: ${id}`);

        if (!ObjectId.isValid(id)) {
            console.log('‚ùå ID no v√°lido');
            return res.status(400).json({ 
                success: false,
                error: 'ID no v√°lido' 
            });
        }

        // Validaciones b√°sicas
        if (!nombre || !apellido || !email || !ruta) {
            console.log('‚ùå Faltan campos obligatorios');
            return res.status(400).json({ 
                success: false,
                error: 'Los campos nombre, apellido, email y ruta son obligatorios' 
            });
        }

        const datosActualizados = {
            nombre: nombre.trim(),
            apellido: apellido.trim(),
            edad: parseInt(edad) || 0,
            email: email.trim().toLowerCase(),
            ruta: ruta.trim(),
            fechaActualizacion: new Date()
        };

        const resultado = await collection.updateOne(
            { _id: new ObjectId(id) },
            { $set: datosActualizados }
        );

        if (resultado.matchedCount === 0) {
            console.log('‚ùå Camper no encontrado');
            return res.status(404).json({ 
                success: false,
                error: 'Camper no encontrado' 
            });
        }

        console.log(`‚úÖ Camper actualizado: ${nombre} ${apellido}`);
        
        res.json({ 
            success: true,
            message: 'Camper actualizado exitosamente',
            modified: resultado.modifiedCount > 0
        });

    } catch (error) {
        console.error('‚ùå Error actualizando camper:', error.message);
        res.status(500).json({ 
            success: false,
            error: 'Error interno del servidor',
            message: error.message 
        });
    }
});

// ===== ELIMINAR CAMPER =====
app.delete('/campers/:id', async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`üóëÔ∏è Eliminando camper con ID: ${id}`);

        if (!ObjectId.isValid(id)) {
            console.log('‚ùå ID no v√°lido');
            return res.status(400).json({ 
                success: false,
                error: 'ID no v√°lido' 
            });
        }

        // Primero obtener los datos del camper para mostrar informaci√≥n
        const camper = await collection.findOne({ _id: new ObjectId(id) });
        
        if (!camper) {
            console.log('‚ùå Camper no encontrado');
            return res.status(404).json({ 
                success: false,
                error: 'Camper no encontrado' 
            });
        }

        const resultado = await collection.deleteOne({ _id: new ObjectId(id) });

        if (resultado.deletedCount === 0) {
            console.log('‚ùå No se pudo eliminar el camper');
            return res.status(404).json({ 
                success: false,
                error: 'No se pudo eliminar el camper' 
            });
        }

        console.log(`‚úÖ Camper eliminado: ${camper.nombre} ${camper.apellido}`);
        
        res.json({ 
            success: true,
            message: 'Camper eliminado exitosamente',
            deletedCamper: {
                id: camper._id,
                nombre: `${camper.nombre} ${camper.apellido}`,
                email: camper.email
            }
        });

    } catch (error) {
        console.error('‚ùå Error eliminando camper:', error.message);
        res.status(500).json({ 
            success: false,
            error: 'Error interno del servidor',
            message: error.message 
        });
    }
});

// ===== RUTA PARA ESTAD√çSTICAS =====
app.get('/stats', async (req, res) => {
    try {
        console.log('üìä Calculando estad√≠sticas...');
        
        const totalCampers = await collection.countDocuments();
        const campers = await collection.find({}).toArray();
        
        // Calcular estad√≠sticas
        const rutas = [...new Set(campers.map(c => c.ruta))];
        const edades = campers.map(c => c.edad).filter(e => e > 0);
        const promedioEdad = edades.length > 0 ? 
            Math.round(edades.reduce((a, b) => a + b, 0) / edades.length) : 0;

        const stats = {
            totalCampers,
            totalrutas: rutas.length,
            promedioEdad,
            rutas: rutas,
            campersPorruta: {}
        };

        // Contar campers por ruta
        rutas.forEach(ruta => {
            stats.campersPorruta[ruta] = campers.filter(c => c.ruta === ruta).length;
        });

        console.log(`‚úÖ Estad√≠sticas calculadas: ${totalCampers} campers, ${rutas.length} rutas`);
        
        res.json({
            success: true,
            data: stats
        });

    } catch (error) {
        console.error('‚ùå Error calculando estad√≠sticas:', error.message);
        res.status(500).json({ 
            success: false,
            error: 'Error interno del servidor',
            message: error.message 
        });
    }
});

// ===== MANEJO DE ERRORES =====
app.use((error, req, res, next) => {
    console.error('‚ùå Error no manejado:', error);
    res.status(500).json({ 
        success: false,
        error: 'Error interno del servidor' 
    });
});

// Ruta 404 - debe ir al final de todas las rutas
app.use((req, res) => {
    console.log(`‚ùì Ruta no encontrada: ${req.method} ${req.originalUrl}`);
    res.status(404).json({ 
        success: false,
        error: 'Ruta no encontrada',
        availableEndpoints: [
            'GET /',
            'GET /campers',
            'GET /campers/:id',
            'POST /campers',
            'PUT /campers/:id',
            'DELETE /campers/:id',
            'GET /stats'
        ]
    });
});

// ===== INICIAR SERVIDOR =====
async function iniciarServidor() {
    console.log('üöÄ Iniciando servidor CRUD de Campers...\n');
    
    const conectado = await conectarDB();

    if (!conectado) {
        console.error('\n‚ùå No se pudo conectar a MongoDB');
        console.log('\nüìù Para solucionarlo:');
        console.log('1. Verifica tu conexi√≥n a internet');
        console.log('2. Aseg√∫rate de que la URL de MongoDB sea correcta');
        console.log('3. Si usas MongoDB Atlas, verifica que tu IP est√© en la whitelist');
        console.log('\nüåê Para MongoDB Atlas:');
        console.log('‚Ä¢ Ve a https://mongodb.com/atlas');
        console.log('‚Ä¢ Crea una cuenta gratuita');
        console.log('‚Ä¢ Crea un cluster gratuito');
        console.log('‚Ä¢ Obt√©n tu string de conexi√≥n\n');
        process.exit(1);
    }

    app.listen(PORT, () => {
        console.log('\nüéâ ¬°Servidor iniciado exitosamente!');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log(`üåê URL: http://localhost:${PORT}`);
        console.log(`üì° Puerto: ${PORT}`);
        console.log(`üìä Base de datos: ${dbName}`);
        console.log(`üì¶ Colecci√≥n: ${collectionName}`);
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('\nüìù Endpoints disponibles:');
        console.log(`‚Ä¢ GET    http://localhost:${PORT}/           - Info del API`);
        console.log(`‚Ä¢ GET    http://localhost:${PORT}/campers    - Ver todos los campers`);
        console.log(`‚Ä¢ GET    http://localhost:${PORT}/campers/ID - Ver camper espec√≠fico`);
        console.log(`‚Ä¢ POST   http://localhost:${PORT}/campers    - Crear camper`);
        console.log(`‚Ä¢ PUT    http://localhost:${PORT}/campers/ID - Actualizar camper`);
        console.log(`‚Ä¢ DELETE http://localhost:${PORT}/campers/ID - Eliminar camper`);
        console.log(`‚Ä¢ GET    http://localhost:${PORT}/stats      - Estad√≠sticas`);
        console.log('\nüí° Ejemplos de uso:');
        console.log('curl http://localhost:3000/');
        console.log('curl http://localhost:3000/campers');
        console.log('curl -X POST http://localhost:3000/campers -H "Content-Type: application/json" -d \'{"nombre":"Juan","apellido":"P√©rez","edad":20,"email":"juan@email.com","ruta":"Desarrollo Web"}\'');
        console.log('\n‚úÖ Servidor listo para recibir peticiones');
    });
}

// Manejo de cierre del servidor
process.on('SIGINT', () => {
    console.log('\n\nüõë Cerrando servidor...');
    console.log('üëã ¬°Gracias por usar CRUD de Campers!');
    process.exit(0);
});

// Manejo de errores no capturados
process.on('uncaughtException', (error) => {
    console.error('‚ùå Error no capturado:', error.message);
    process.exit(1);
});

process.on('unhandledRejection', (error) => {
    console.error('‚ùå Promesa rechazada:', error.message);
    process.exit(1);
});

// ===== INICIAR LA APLICACI√ìN =====
iniciarServidor().catch((error) => {
    console.error('‚ùå Error iniciando el servidor:', error.message);
    process.exit(1);
});